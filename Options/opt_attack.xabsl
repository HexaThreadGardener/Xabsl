/*
 * opt_attack: The action as attacker after kick-off.
 *
 * Two strategies are supported:
 * 1. First kick softly along an angle toward the side, follow the ball, rotate, then shoot.        (attackMode = kick_kick)
 * 2. First dribble (walk with ball in front) along an angle toward the side, rotate, then shoot.   (attackMode = dribble_kick)
 * The shared part of strategy:
 * - Try to follow the ball after shoot, and shoot again if the first shoot is not powerful enough.
 * - If the ball is lost unexpectedly in any stage, search for the ball again and call "opt_go_to_ball" (which supports going to ball from any location) to continue attacking.
 *
 * Reads:
 * - isAttacker
 * - isBallSeen
 * - is_robot_moving
 * - attackMode
 * - ballBearing
 * - ballRange
 * - isGoalSeen
 * - goalCenterBearing
 *
 * Writes:
 * - headMode
 * - target_theta
 * - target_x
 * - kick_speed
 * - virtualGoalLoc.World.x
 * - virtualGoalLoc.World.y
 *
 * Behaves:
 * - behavior_nothing
 * - behavior_rotate_around_center
 * - behavior_walk
 * - behavior_stop_walk
 * - behavior_walk_to_ball
 *
 * Calls:
 * - opt_kick_ball
 * - opt_search_for_ball_kick_off
 * - opt_search_for_goal
 */

/* The decision template:

            if (!isAttacker) {
                goto attack_done;
            }
            else {
                // state decision here
            }

*/

option opt_attack {

    initial state search_kick_off {         // 0
        // no need to iterate over all directions; simply look down to locate ball
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (isBallSeen) {
                    goto rotate_kick_off;
                } else {
                    if (state_time < T_SEARCH_BALL) {
                        stay;
                    }
                    else {
                        goto search_after_lost;
                    }
                }
            }
        }
        action {
            headMode = CloseMid;
            behavior_nothing();
        }
    }

    state rotate_kick_off {                 // 1
        // rotate a certain angle before touching the ball
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!isBallSeen) {
                    goto search_after_lost;
                }
                else {
                    if (state_time < T_TURN_BODY || is_robot_moving) {
                        stay;
                    }
                    else {
                        if (attackMode == kick_kick) {
                            goto first_kick;
                        }
                        else if (attackMode == dribble_kick) {
                            goto dribble;
                        }
                        else {
                            // ERROR: illegal attack mode
                            stay;
                        }
                    }
                }
            }
        }
        action {
            //headMode = HorizontalTrack;
            target_theta = -THETA_KICKOFF;
            target_x = R_KICKOFF;
            behavior_rotate_around_center();
        }
    }

    state first_kick {                      // 2
        // kick the ball softly along an angle to the side
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!action_done) {
                    stay;
                }
                else {
                    goto follow_after_kick_off;
                }
            }
        }
        action {
            // look at the goal
            // headMode = THETA_KICKOFF > 0 ? FarLeft : FarRight;

            // kick softly
            kick_speed = 0;
            opt_kick_ball();
        }
    }

    state follow_after_kick_off {           // 3
        // walk straight ahead
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (state_time > T_FOLLOW_AFTER_KICK_OFF) {
                    if (isBallSeen) {
                        // have walked for long enough, stop and prepare to kick the ball
                        goto stop_1_before_shoot;
                    }
                    else {
                        // the ball is lost, search for it again
                        goto search_after_lost;
                    }
                }
                else {
                    if (isBallSeen && ballRange < R_KICKABLE) {
                        // the ball is already very close, stop and prepare to kick it
                        goto stop_1_before_shoot;
                    }
                    else {
                        // the ball is too far, continue walking
                        stay;
                    }
                }
            }
        }
        action {
            headMode = CloseMid;
            // walk with v_x = max, v_y = v_theta = 0
            behavior_walk();
        }
    }

    state stop_1_before_shoot {               // 4
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (is_robot_moving) {
                    stay;
                }
                else {
                    goto stop_2_before_shoot;
                }
            }
        }
        action {
            // look at the goal
            //headMode = THETA_KICKOFF > 0 ? FarLeft : FarRight;
            headMode = FarMid;

            // set velocity to 0
            behavior_stop_walk();
        }
    }

    state stop_2_before_shoot {             // 5
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (state_time < 2 * T) {
                    stay;
                }
                else {
                    goto rotate_to_ball_before_shoot;
                }
            }
        }
        action {
            headMode = CloseMid;
            behavior_nothing();
        }
    }

    state rotate_to_ball_before_shoot {             // 6
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (is_robot_moving) {
                    stay;
                }
                else {
                    if (!isBallSeen) {
                        goto search_after_lost;
                    }
                    else if (-THETA_ROTATE_TO_BALL < ballBearing && ballBearing < THETA_ROTATE_TO_BALL) {
                        // ball bearing is already small enough; skip this step
                        goto rotate_to_goal_before_shoot;
                    }
                    else if (state_time < T_TURN_BODY) {
                        // wait for some time for the rotate command to be sent
                        stay;
                    }
                    else {
                        // finished
                        goto rotate_to_goal_before_shoot;
                    }
                }
            }
        }
        action {
            headMode = CloseMid;
            // do not rotate if the ball is not seen, or if the ball bearing is already small enough
            target_theta = (isBallSeen && -THETA_ROTATE_TO_BALL < ballBearing && ballBearing < THETA_ROTATE_TO_BALL) ? ballBearing : 0;
            target_x = 0;
            goal_found_headMode = FarMid;   // default head mode for the next state rotate_to_goal_before_shoot
            behavior_rotate_around_center();
        }
    }

    state rotate_to_goal_before_shoot {             // 7
        // TODO: try to make use of SLAM information
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                    if (!isGoalSeen) {
                        goto search_for_goal;
                    }
                    else if (-THETA_ROTATE_TO_GOAL < goalCenterBearing && goalCenterBearing < THETA_ROTATE_TO_BALL) {
                        // goal bearing is already small enough; skip this step
                        goto shoot;
                    }
                    else if (state_time < T_TURN_BODY) {
                        // wait for some time for the rotate command to be sent
                        stay;
                    }
                    else {
                        // finished
                        goto shoot;
                    }
            }
        }
        action {
            // first use the head mode when the goal is last found; switch to FarMid after rotating body
            headMode = state_time < T_TURN_BODY ? goal_found_headMode : FarMid;
            // do not rotate if the goal is not seen, or if the goal bearing is already small enough
            target_theta = (isGoalSeen && -THETA_ROTATE_TO_GOAL < goalCenterBearing && goalCenterBearing < THETA_ROTATE_TO_GOAL) ? goalCenterBearing : 0;
            target_x = ballRange;
            behavior_rotate_around_center();
        }
    }

    state search_for_goal {   //8
        decision {
		    if (!isAttacker) {
		        goto attack_done;
		    }
		    else {
                if (!action_done) {
                    stay;
                }
                else {
                    goto rotate_to_goal_before_shoot;
                }
            }
        }
        action {
            opt_search_for_goal();
        }
    }

    state shoot {                           // 9
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!action_done) {
                    stay;
                }
                else {
                    goto blind_follow_after_shoot;
                }
            }
        }
        action {
            // look at goal
            headMode = FarMid;

            // walking kick
            kick_speed = 2;
            opt_kick_ball();
        }
    }

    state blind_follow_after_shoot {        // 10
        // walk with head up until the ball is seen; search again if the ball is not seen for too long (>T_BLIND_FOLLOW_AFTER_SHOOT)
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (isBallSeen) {
                    // track the ball and walk to it
                    goto track_after_shoot;
                }
                else {
                    if (state_time < T_BLIND_FOLLOW_AFTER_SHOOT) {
                        // walk on and wait for the ball to appear
                        stay;
                    }
                    else {
                        // ball not seen for too long, search again
                        goto search_after_lost;
                    }
                }
            }
        }
        action {
            headMode = FarMid;
            // walk with v_x = max, v_y = v_theta = 0
            behavior_walk();
        }
    }

    state track_after_shoot {               // 11
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!isBallSeen) {
                    goto search_after_lost;
                }
                else {
                    if (ballRange < R_KICKABLE) {
                        // ball is near enough, prepare to shoot again
                        goto stop_1_before_shoot;
                    }
                    else {
                        stay;
                    }
                }
            }
        }
        action {
            headMode = BothTrack; //Check this

            // rectify direction according to the ball
            // walk with v_x = max, v_y = 0, v_theta = k * ballBearing  (k is an empirical parameter)
            behavior_walk_to_ball();
        }
    }

    state search_after_lost {               // 12
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!action_done) {
                    stay;
                }
                else {
                    goto go_to_ball_from_any;
                }
            }
        }
        action {
            opt_search_for_ball_kick_off();
        }
    }

    state go_to_ball_from_any {             // 13
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (!action_done) {
                    stay;
                }
                else {
                    goto shoot;
                }
            }
        }
        action {
            opt_go_to_ball();
        }
    }

    state dribble {                         // 14
        // used by dribble_kick mode
        decision {
            if (!isAttacker) {
                goto attack_done;
            }
            else {
                if (state_time < T_DRIBBLE) {
                    stay;
                }
                else {
                    goto stop_1_before_shoot;
                }
            }
        }
        action {
            // look at goal (no look dribble? [lol])
            // headMode = THETA_KICKOFF > 0 ? FarLeft : FarRight;
            headMode = FarMid;
            
            // walk with v_x = max, v_y = v_theta = 0
            behavior_walk();
        }
    }

    target state attack_done {              // 15
        decision {
            stay;
        }
        action {
            behavior_nothing();
        }
    }
}
