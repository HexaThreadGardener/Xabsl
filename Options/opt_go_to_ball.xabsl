/* opt_go_to_ball: From arbitrary position, suppose the ball is seen, go to ball, and rotate to face the "goal".
 *
 * Clarification of terms:
 * For sake of generalization, the terms "left", "right" and "goal" should be interpreted as follows in this option:
 *  - "goal": the position the robot wants to kick the ball to (not necessarily the actual goal); pass this parameter using variables virtualGoalLoc.World.{x,y}
 * Now let's denote robot as R, ball as B, and "goal" as G.
 *  - "left": the front of the robot and \vec{BG} are on the same side of line RB (see case 2 of opt_go_to_ball.png)
 *  - "right": the front of the robot and \vec{BG} are on different sides of line RB (see case 1 of opt_go_to_ball.png)
 *
 * The strategy:
 *  - When "left": rotate --> walk an "S" shape --> rotate
 *  - When "right": rotate --> walk an arc --> rotate
 * Note: the whole process is Markov.
 *
 * Reads: 
 * - is_within_tol              (whether the ball bearing is small enough for the robot to walk to it without in-place rotating)
 * - theta_start_walking        (expected abs(ball bearing) when walking is started, determined by min(THETA_TOL, <theta determined by R_TOL>))
 * - virtualGoalLoc.World.x     (specified by caller in XABSL, NOT USED FOR NOW)
 * - virtualGoalLoc.World.y     (specified by caller in XABSL, NOT USED FOR NOW)
 * - virtualGoalBearing         (given by @cpp, NOT USED FOR NOW)
 * - isBallSeen
 * - ballRange
 * - ballBearing
 * - is_robot_moving
 *
 * Writes:
 * - headMode
 * - target_theta
 * - target_range
 *
 * Calls:
 * - opt_stop_walking
 * - opt_rotate_before_shoot
 * - opt_search_for_goal
 * - opt_search_for_ball_kick_off
 *
 * Behaves:
 * - behavior_nothing
 * - behavior_round_clockwise
 * - behavior_during_walk        (NOT USED FOR NOW)
 * - behavior_walk_to_ball
 * - behavior_rotate_around_center
 *
 * TODO: this part needs review
 *
 * NOTE: the arc/S logic is NOT implemented for now!
 */

option opt_go_to_ball
{
    initial state check_before_walk {                           // 0
        decision {
            if (state_time < T_WAIT_BEFORE_WALK) {
                stay;
            }
            else {
                if (!isBallSeen) {
                    goto search_for_ball;
                }
                else {
	                if (ballRange < R_KICKABLE) {
	                    // when the ball is already near (e.g. kickoff), use rotation mode to adjust toward the "goal" directly
	                    goto rotate_to_ball;
	                }
	                else if (is_within_tol) {
	                    goto during_walk;
	                }
	                else {
	                    goto rotate_before_walk;
	                }
                }
            }
        }
        action {
            headMode = HorizontalTrack;
            behavior_nothing();     // wait until is_within_tol and theta_start_walking are ready

            /* pseudocode of updating is_within_tol theta_start_walking, virtualGoalRange, virtualGoalBearing:
                delta_x = virtualGoalLoc.World.x - robotLoc.x;
                delta_y = virtualGoalLoc.World.y - robotLoc.y;
                virtualGoalRange = sqrt(delta_x ^ 2 + delta_y ^ 2);
                cosVirtualGoalBearing = delta_x / virtualGoalRange;
                virtualGoalBearing = acos(cosVirtualGoalBearing);
                is_left = ballRange * cos(ballBearing) < virtualGoalRange * cosVirtualGoalRange;
                R = is_left ? ballRange / (4 * sin(ballBearing)) : ballRange / (2 * sin(ballBearing));      // radius of arc walking
                theta_by_R = is_left ? asin(ballRange / (4 * R_TOL)) : asin(ballRange / (2 * R_TOL));
                theta_start_walking = min(THETA_TOL, theta_by_R);
                is_within_tol = (abs(ballBearing) < THETA_TOL) && (R > R_TOL);
            */
        }
    }

    state rotate_before_walk {                              // 1
        decision {
            if (state_time < T_TURN_BODY || is_robot_moving) {
                stay;
            }
            else {
                goto during_walk;
            }
        }
        action {
            headMode = HorizontalTrack;
            target_theta = (ballBearing > 0) ? (ballBearing - theta_start_walking) : (ballBearing + theta_start_walking);         // TODO: here it is assumed that anti-clockwise is the positive direction of ballBearing; correct it if necessary
            target_x = 0;
            behavior_rotate_around_center();
        }
    }

    state during_walk {                            // 2
        decision {
            if (!isBallSeen) {
                goto search_for_ball;
            }
            else {
	            if (ballRange < R_KICKABLE) {
	                goto stop_walking;
	            }
	            else {
	                stay;
	            }
            }
        }
        action {
            headMode = BothTrack;

            /*
            Use velocity mode. Pseudocode for the parameters:
            v_x = V_X_MAX;
            v_y = 0;
            sign = (is_left xor ballBearing > 0) ? -1 : 1;  // TODO: here it is assumed that anti-clockwise is the positive direction; correct it if necessary
            v_theta = sign * V_X_MAX / R;      // TODO: or maybe v_theta = sign * V_X_MAX^2 / R, depending on the implementation of gait; the purpose is to walk along an arc of radius R

            NOTE: the logic above is not USED for now!
            */
            behavior_walk_to_ball();
        }
    }

    state stop_walking {               // 3
        decision {
            if (!action_done) {
                stay;
            }
            else {
                if (virtualGoalLoc.World.x * 2 == goalLocLeft.World.x + goalLocRight.World.x && virtualGoalLoc.World.y * 2 == goalLocLeft.World.y + goalLocRight.World.y) {
                    // virtual "goal" is the actual goal
                    goto rotate_before_shoot;
                }
                else {
                    goto rotate_to_ball;
                }
            }
        }
        action {
            opt_stop_walking();
        }
    }

    state rotate_before_shoot {        // 4
        decision {
            if (!action_done) {
                stay;
            }
            else {
                goto go_to_ball_done;
            }
        }
        action {
            opt_rotate_before_shoot();
        }
    }

    state rotate_to_ball {            // 5
        // copied from opt_rotate_before_shoot; sync manually if necessary
        decision {
            if (is_robot_moving) {
                stay;
            }
            else {
                if (!isBallSeen) {
                    goto search_for_ball;
                }
                else if (-THETA_ROTATE_TO_BALL < ballBearing && ballBearing < THETA_ROTATE_TO_BALL) {
                    // ball bearing is already small enough; skip this step
                    goto rotate_to_virtual_goal;
                }
                else if (state_time < T_TURN_BODY) {
                    // wait for some time for the rotate command to be sent
                    stay;
                }
                else {
                    // finished
                    goto rotate_to_virtual_goal;
                }
            }
        }
        action {
            headMode = CloseMid;
            // do not rotate if the ball is not seen, or if the ball bearing is already small enough
            target_theta = (isBallSeen && -THETA_ROTATE_TO_BALL < ballBearing && ballBearing < THETA_ROTATE_TO_BALL) ? ballBearing : 0;
            target_x = 0;
            behavior_rotate_around_center();
        }
            
    }

    state rotate_to_virtual_goal {               // 6
        decision {
            if (state_time < T_TURN_BODY || is_robot_moving) {
                stay;
            }
            else {
                goto go_to_ball_done;
            }
        }
        action {
            // look at goal and center around ball
            headMode = FarMid;
            target_theta = virtualGoalBearing;
            target_x = ballRange;
            behavior_rotate_around_center();
        }
    }

    state search_for_ball {                     // 7
        // ball is lost; search again
        decision {
            if (!action_done) {
                stay;
            }
            else {
                goto check_before_walk;
            }
        }
        action {
            opt_search_for_ball_kick_off();
        }
    }

    target state go_to_ball_done {              // 8
        decision {
            stay;
        }
        action {
            behavior_nothing();
        }
    }
}
